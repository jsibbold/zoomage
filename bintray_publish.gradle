apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'


version = libraryVersion

android.libraryVariants.all { variant ->

    def variantName = variant.name.capitalize()
    def javaDocTaskName = "generate${variantName}Javadoc"

    task(javaDocTaskName, type: Javadoc, dependsOn: "assemble${variantName}") {
        failOnError false
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task ("generate${variantName}JavadocJar", type: Jar, dependsOn: javaDocTaskName) {
        classifier = 'javadoc'
        from getTasksByName(javaDocTaskName, true).destinationDir
    }

    task ("generate${variantName}SourcesJar", type: Jar) {
        from variant.javaCompile.source
        classifier = 'sources'
    }

}

afterEvaluate {
    artifacts {
        archives generateReleaseJavadocJar
        archives generateReleaseSourcesJar
    }
}

ext {
    // command-line deployment
    bintrayUserParameterName = 'bintrayUser'
    bintrayKeyParameterName = 'bintrayKey'

    // CI deployment
    bintrayUserEnvVarName = 'BINTRAY_USER'
    bintrayKeyEnvVarName = 'BINTRAY_KEY'
}

bintray {
    user = project.hasProperty(bintrayUserParameterName) ?
            project.property(bintrayUserParameterName) : System.getenv(bintrayUserEnvVarName)

    key = project.hasProperty(bintrayKeyParameterName) ?
            project.property(bintrayKeyParameterName) : System.getenv(bintrayKeyEnvVarName)

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        issueTrackerUrl = libraryIssueTrackerUrl
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = libraryLabels
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}

artifactory {
    def artifactoryUrlProperty = 'artifactory_contextUrl'
    def artifactoryUrl = project.hasProperty(artifactoryUrlProperty) ?
            project.property(artifactoryUrlProperty) : ''


    def artifactoryUserProperty = 'artifactory_user'
    def artifactoryUserName = project.hasProperty(artifactoryUserProperty) ?
            project.property(artifactoryUserProperty) : ''


    def artifactoryPasswordProperty = 'artifactory_password'
    def artifactoryPassword = project.hasProperty(artifactoryPasswordProperty) ?
            project.property(artifactoryPasswordProperty) : ''

    contextUrl = artifactoryUrl   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = artifactoryUserName
            password = artifactoryPassword
            maven = true
        }
        defaults {
            publishConfigs('archives')
            properties = ['build.status': "$it.project.status".toString()]
            publishPom = true //Publish generated POM files to Artifactory (true by default)
            publishIvy = false //Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }

    resolve {
        repository {
            repoKey = 'libs-release'
            username = artifactoryUserName
            password = artifactoryPassword
            maven = true
        }
    }
}
